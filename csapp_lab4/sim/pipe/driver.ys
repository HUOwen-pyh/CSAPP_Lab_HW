#######################################################################
# Test for copying block of size 50;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $50, %rdx		# src and dst have 50 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
#rdi 
#rsi r8 r9 r10 r11 r12 r13
	xorq %rax,%rax
	irmovq $1,%rcx
loop:	iaddq $-6,%rdx		
	jl root
	mrmovq (%rdi),%r8
	mrmovq 8(%rdi),%r9
	mrmovq 16(%rdi),%r10
	mrmovq 24(%rdi),%r11
	mrmovq 32(%rdi),%r12
	mrmovq 40(%rdi),%r13
	rmmovq %r8,(%rsi)
	rmmovq %r9,8(%rsi)
	rmmovq %r10,16(%rsi)
	rmmovq %r11,24(%rsi)
	rmmovq %r12,32(%rsi)
	rmmovq %r13,40(%rsi)
	iaddq $48,%rdi
	iaddq $48,%rsi
	jmp addpro
loop5:
	mrmovq (%rdi),%r8
	mrmovq 8(%rdi),%r9
	mrmovq 16(%rdi),%r10
	mrmovq 24(%rdi),%r11
	mrmovq 32(%rdi),%r12
	rmmovq %r8,(%rsi)
	rmmovq %r9,8(%rsi)
	rmmovq %r10,16(%rsi)
	rmmovq %r11,24(%rsi)
	rmmovq %r12,32(%rsi)
	jmp add1
loop4:
	mrmovq (%rdi),%r8
	mrmovq 8(%rdi),%r9
	mrmovq 16(%rdi),%r10
	mrmovq 24(%rdi),%r11
	rmmovq %r8,(%rsi)
	rmmovq %r9,8(%rsi)
	rmmovq %r10,16(%rsi)
	rmmovq %r11,24(%rsi)
	jmp add2
loop3:
	mrmovq (%rdi),%r8
	mrmovq 8(%rdi),%r9
	mrmovq 16(%rdi),%r10
	rmmovq %r8,(%rsi)
	rmmovq %r9,8(%rsi)
	rmmovq %r10,16(%rsi)
	jmp add3
loop2:
	mrmovq (%rdi),%r8
	mrmovq 8(%rdi),%r9
	rmmovq %r8,(%rsi)
	rmmovq %r9,8(%rsi)
	jmp add4
loop1:
	mrmovq (%rdi),%r8
	rmmovq %r8,(%rsi)
	jmp add5
root:	
	xorq %rcx,%rcx
	iaddq $1,%rdx
	je loop5
	iaddq $1,%rdx
	je loop4
	iaddq $1,%rdx
	je loop3
	iaddq $1,%rdx
	je loop2
	iaddq $1,%rdx
	je loop1
	jmp Done
addpro:
	andq %r13,%r13
	jle add1
	iaddq $1,%rax
add1:
	andq %r12,%r12
	jle add2
	iaddq $1,%rax
add2:
	andq %r11,%r11
	jle add3
	iaddq $1,%rax
add3:
	andq %r10,%r10
	jle add4
	iaddq $1,%rax
add4:
	andq %r9,%r9
	jle add5
	iaddq $1,%rax
add5:
	andq %r8,%r8
	jle add6
	iaddq $1,%rax
add6:
	andq %rcx,%rcx
	je Done
	jmp loop

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 21.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $21,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $50,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad -5
	.quad 6
	.quad -7
	.quad -8
	.quad -9
	.quad -10
	.quad -11
	.quad 12
	.quad -13
	.quad 14
	.quad 15
	.quad -16
	.quad -17
	.quad 18
	.quad 19
	.quad -20
	.quad 21
	.quad -22
	.quad -23
	.quad -24
	.quad -25
	.quad 26
	.quad -27
	.quad -28
	.quad -29
	.quad 30
	.quad -31
	.quad 32
	.quad -33
	.quad 34
	.quad 35
	.quad 36
	.quad -37
	.quad 38
	.quad -39
	.quad -40
	.quad -41
	.quad 42
	.quad 43
	.quad 44
	.quad 45
	.quad -46
	.quad -47
	.quad -48
	.quad -49
	.quad 50
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
