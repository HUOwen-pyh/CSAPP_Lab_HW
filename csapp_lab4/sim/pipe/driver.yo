                            | #######################################################################
                            | # Test for copying block of size 50;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47008000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23200000000000000 | 	irmovq $50, %rdx		# src and dst have 50 elements
0x014: 30f65806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 804503000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | #rdi 
                            | #rsi r8 r9 r10 r11 r12 r13
0x03b: 6300                 | 	xorq %rax,%rax
0x03d: 30f10100000000000000 | 	irmovq $1,%rcx
0x047: c0f2faffffffffffffff | loop:	iaddq $-6,%rdx		
0x051: 724802000000000000   | 	jl root
0x05a: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x064: 50970800000000000000 | 	mrmovq 8(%rdi),%r9
0x06e: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10
0x078: 50b71800000000000000 | 	mrmovq 24(%rdi),%r11
0x082: 50c72000000000000000 | 	mrmovq 32(%rdi),%r12
0x08c: 50d72800000000000000 | 	mrmovq 40(%rdi),%r13
0x096: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x0a0: 40960800000000000000 | 	rmmovq %r9,8(%rsi)
0x0aa: 40a61000000000000000 | 	rmmovq %r10,16(%rsi)
0x0b4: 40b61800000000000000 | 	rmmovq %r11,24(%rsi)
0x0be: 40c62000000000000000 | 	rmmovq %r12,32(%rsi)
0x0c8: 40d62800000000000000 | 	rmmovq %r13,40(%rsi)
0x0d2: c0f73000000000000000 | 	iaddq $48,%rdi
0x0dc: c0f63000000000000000 | 	iaddq $48,%rsi
0x0e6: 70b202000000000000   | 	jmp addpro
0x0ef:                      | loop5:
0x0ef: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x0f9: 50970800000000000000 | 	mrmovq 8(%rdi),%r9
0x103: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10
0x10d: 50b71800000000000000 | 	mrmovq 24(%rdi),%r11
0x117: 50c72000000000000000 | 	mrmovq 32(%rdi),%r12
0x121: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x12b: 40960800000000000000 | 	rmmovq %r9,8(%rsi)
0x135: 40a61000000000000000 | 	rmmovq %r10,16(%rsi)
0x13f: 40b61800000000000000 | 	rmmovq %r11,24(%rsi)
0x149: 40c62000000000000000 | 	rmmovq %r12,32(%rsi)
0x153: 70c702000000000000   | 	jmp add1
0x15c:                      | loop4:
0x15c: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x166: 50970800000000000000 | 	mrmovq 8(%rdi),%r9
0x170: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10
0x17a: 50b71800000000000000 | 	mrmovq 24(%rdi),%r11
0x184: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x18e: 40960800000000000000 | 	rmmovq %r9,8(%rsi)
0x198: 40a61000000000000000 | 	rmmovq %r10,16(%rsi)
0x1a2: 40b61800000000000000 | 	rmmovq %r11,24(%rsi)
0x1ac: 70dc02000000000000   | 	jmp add2
0x1b5:                      | loop3:
0x1b5: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x1bf: 50970800000000000000 | 	mrmovq 8(%rdi),%r9
0x1c9: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10
0x1d3: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x1dd: 40960800000000000000 | 	rmmovq %r9,8(%rsi)
0x1e7: 40a61000000000000000 | 	rmmovq %r10,16(%rsi)
0x1f1: 70f102000000000000   | 	jmp add3
0x1fa:                      | loop2:
0x1fa: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x204: 50970800000000000000 | 	mrmovq 8(%rdi),%r9
0x20e: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x218: 40960800000000000000 | 	rmmovq %r9,8(%rsi)
0x222: 700603000000000000   | 	jmp add4
0x22b:                      | loop1:
0x22b: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x235: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x23f: 701b03000000000000   | 	jmp add5
0x248:                      | root:	
0x248: 6311                 | 	xorq %rcx,%rcx
0x24a: c0f20100000000000000 | 	iaddq $1,%rdx
0x254: 73ef00000000000000   | 	je loop5
0x25d: c0f20100000000000000 | 	iaddq $1,%rdx
0x267: 735c01000000000000   | 	je loop4
0x270: c0f20100000000000000 | 	iaddq $1,%rdx
0x27a: 73b501000000000000   | 	je loop3
0x283: c0f20100000000000000 | 	iaddq $1,%rdx
0x28d: 73fa01000000000000   | 	je loop2
0x296: c0f20100000000000000 | 	iaddq $1,%rdx
0x2a0: 732b02000000000000   | 	je loop1
0x2a9: 704403000000000000   | 	jmp Done
0x2b2:                      | addpro:
0x2b2: 62dd                 | 	andq %r13,%r13
0x2b4: 71c702000000000000   | 	jle add1
0x2bd: c0f00100000000000000 | 	iaddq $1,%rax
0x2c7:                      | add1:
0x2c7: 62cc                 | 	andq %r12,%r12
0x2c9: 71dc02000000000000   | 	jle add2
0x2d2: c0f00100000000000000 | 	iaddq $1,%rax
0x2dc:                      | add2:
0x2dc: 62bb                 | 	andq %r11,%r11
0x2de: 71f102000000000000   | 	jle add3
0x2e7: c0f00100000000000000 | 	iaddq $1,%rax
0x2f1:                      | add3:
0x2f1: 62aa                 | 	andq %r10,%r10
0x2f3: 710603000000000000   | 	jle add4
0x2fc: c0f00100000000000000 | 	iaddq $1,%rax
0x306:                      | add4:
0x306: 6299                 | 	andq %r9,%r9
0x308: 711b03000000000000   | 	jle add5
0x311: c0f00100000000000000 | 	iaddq $1,%rax
0x31b:                      | add5:
0x31b: 6288                 | 	andq %r8,%r8
0x31d: 713003000000000000   | 	jle add6
0x326: c0f00100000000000000 | 	iaddq $1,%rax
0x330:                      | add6:
0x330: 6211                 | 	andq %rcx,%rcx
0x332: 734403000000000000   | 	je Done
0x33b: 704700000000000000   | 	jmp loop
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x344:                      | Done:
0x344: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x345:                      | End:
                            | #/* $end ncopy-ys */
0x345:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 21.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x345:                      | check:
                            | 	# Return value test
0x345: 30fa1500000000000000 | 	irmovq $21,%r10
0x34f: 61a0                 | 	subq %r10,%rax
0x351: 736d03000000000000   | 	je checkb
0x35a: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x364: 70ab04000000000000   | 	jmp cdone
0x36d:                      | checkb:
                            | 	# Code length check
0x36d: 30f04503000000000000 | 	irmovq EndFun,%rax
0x377: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x381: 6120                 | 	subq %rdx,%rax
0x383: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x38d: 6102                 | 	subq %rax,%rdx
0x38f: 75ab03000000000000   | 	jge checkm
0x398: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3a2: 70ab04000000000000   | 	jmp cdone
0x3ab:                      | checkm:
0x3ab: 30f25806000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3b5: 30f3b004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3bf: 30f73200000000000000 | 	irmovq $50,%rdi  # Count
0x3c9: 6277                 | 	andq %rdi,%rdi
0x3cb: 732904000000000000   | 	je checkpre         # Skip check if count = 0
0x3d4:                      | mcloop:
0x3d4: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x3de: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x3e8: 6160                 | 	subq %rsi,%rax
0x3ea: 730604000000000000   | 	je  mok
0x3f3: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x3fd: 70ab04000000000000   | 	jmp cdone
0x406:                      | mok:
0x406: 30f00800000000000000 | 	irmovq $8,%rax
0x410: 6002                 | 	addq %rax,%rdx	  # dest ++
0x412: 6003                 | 	addq %rax,%rbx    # src++
0x414: 30f00100000000000000 | 	irmovq $1,%rax
0x41e: 6107                 | 	subq %rax,%rdi    # cnt--
0x420: 76d403000000000000   | 	jg mcloop
0x429:                      | checkpre:
                            | 	# Check for corruption
0x429: 30f25006000000000000 | 	irmovq Predest,%rdx
0x433: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x43d: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x447: 6120                 | 	subq %rdx,%rax
0x449: 736504000000000000   | 	je checkpost
0x452: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x45c: 70ab04000000000000   | 	jmp cdone
0x465:                      | checkpost:
                            | 	# Check for corruption
0x465: 30f2e807000000000000 | 	irmovq Postdest,%rdx
0x46f: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x479: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x483: 6120                 | 	subq %rdx,%rax
0x485: 73a104000000000000   | 	je checkok
0x48e: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x498: 70ab04000000000000   | 	jmp cdone
0x4a1:                      | checkok:
                            | 	# Successful checks
0x4a1: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4ab:                      | cdone:
0x4ab: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4b0:                      | 	.align 8
0x4b0:                      | src:
0x4b0: ffffffffffffffff     | 	.quad -1
0x4b8: feffffffffffffff     | 	.quad -2
0x4c0: 0300000000000000     | 	.quad 3
0x4c8: 0400000000000000     | 	.quad 4
0x4d0: fbffffffffffffff     | 	.quad -5
0x4d8: 0600000000000000     | 	.quad 6
0x4e0: f9ffffffffffffff     | 	.quad -7
0x4e8: f8ffffffffffffff     | 	.quad -8
0x4f0: f7ffffffffffffff     | 	.quad -9
0x4f8: f6ffffffffffffff     | 	.quad -10
0x500: f5ffffffffffffff     | 	.quad -11
0x508: 0c00000000000000     | 	.quad 12
0x510: f3ffffffffffffff     | 	.quad -13
0x518: 0e00000000000000     | 	.quad 14
0x520: 0f00000000000000     | 	.quad 15
0x528: f0ffffffffffffff     | 	.quad -16
0x530: efffffffffffffff     | 	.quad -17
0x538: 1200000000000000     | 	.quad 18
0x540: 1300000000000000     | 	.quad 19
0x548: ecffffffffffffff     | 	.quad -20
0x550: 1500000000000000     | 	.quad 21
0x558: eaffffffffffffff     | 	.quad -22
0x560: e9ffffffffffffff     | 	.quad -23
0x568: e8ffffffffffffff     | 	.quad -24
0x570: e7ffffffffffffff     | 	.quad -25
0x578: 1a00000000000000     | 	.quad 26
0x580: e5ffffffffffffff     | 	.quad -27
0x588: e4ffffffffffffff     | 	.quad -28
0x590: e3ffffffffffffff     | 	.quad -29
0x598: 1e00000000000000     | 	.quad 30
0x5a0: e1ffffffffffffff     | 	.quad -31
0x5a8: 2000000000000000     | 	.quad 32
0x5b0: dfffffffffffffff     | 	.quad -33
0x5b8: 2200000000000000     | 	.quad 34
0x5c0: 2300000000000000     | 	.quad 35
0x5c8: 2400000000000000     | 	.quad 36
0x5d0: dbffffffffffffff     | 	.quad -37
0x5d8: 2600000000000000     | 	.quad 38
0x5e0: d9ffffffffffffff     | 	.quad -39
0x5e8: d8ffffffffffffff     | 	.quad -40
0x5f0: d7ffffffffffffff     | 	.quad -41
0x5f8: 2a00000000000000     | 	.quad 42
0x600: 2b00000000000000     | 	.quad 43
0x608: 2c00000000000000     | 	.quad 44
0x610: 2d00000000000000     | 	.quad 45
0x618: d2ffffffffffffff     | 	.quad -46
0x620: d1ffffffffffffff     | 	.quad -47
0x628: d0ffffffffffffff     | 	.quad -48
0x630: cfffffffffffffff     | 	.quad -49
0x638: 3200000000000000     | 	.quad 50
0x640: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x650:                      | 	.align 16
0x650:                      | Predest:
0x650: fadebc0000000000     | 	.quad 0xbcdefa
0x658:                      | dest:
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8:                      | Postdest:
0x7e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7f0:                      | .align 8
                            | # Run time stack
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
                            | 
0x870:                      | Stack:
